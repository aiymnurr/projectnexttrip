import telebot
import psycopg2
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = '7819265666:AAGONawI3yvy8PGsFXxH0bG04AHzOcHt4Gs'
ADMIN_ID = 1594554887 
bot = telebot.TeleBot(BOT_TOKEN)

DB_CONFIG = {
    'dbname': 'nexttrip001',
    'user': 'postgres',
    'password': 'aiymzhan',
    'host': 'localhost',
    'port': '5432'
}

def db_connect():
    return psycopg2.connect(**DB_CONFIG)

@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="view_cities"),
        InlineKeyboardButton("üõ´ –ù–∞–π—Ç–∏ —Ä–µ–π—Å—ã", callback_data="find_flights"),
        InlineKeyboardButton("üè® –û—Ç–µ–ª–∏", callback_data="hotels"),
        InlineKeyboardButton("üìç –°–ø–∏—Å–æ–∫ –≥–∏–¥–æ–≤", callback_data="attractions"),
        InlineKeyboardButton("üìã –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã", callback_data="my_routes"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_trip")
    )
    if message.from_user.id == ADMIN_ID:
        keyboard.add(InlineKeyboardButton("üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel"))
    
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "view_cities")
def view_cities(call):
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("SELECT city_name, country FROM cities")
    cities = cursor.fetchall()
    cursor.close()
    conn.close()

    cities_text = "\n".join([f"üåÜ {city} ({country})" for city, country in cities])
    bot.send_message(call.message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n\n{cities_text}")

@bot.callback_query_handler(func=lambda call: call.data == "hotels")
def view_hotels(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.")
    bot.register_next_step_handler(msg, show_hotels)

def show_hotels(message):
    city_name = message.text
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT h.name, h.stars, h.address
        FROM hotels h
        JOIN cities c ON h.city_id = c.city_id
        WHERE c.city_name = %s
    """, (city_name,))
    hotels = cursor.fetchall()
    cursor.close()
    conn.close()

    if hotels:
        hotels_text = "\n".join([f"{hotel[0]} ({hotel[1]} –∑–≤–µ–∑–¥) - {hotel[2]}" for hotel in hotels])
        bot.send_message(message.chat.id, f"–û—Ç–µ–ª–∏ –≤ {city_name}:\n\n{hotels_text}")
    else:
        bot.send_message(message.chat.id, f"–û—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data == "my_routes")
def view_routes(call):
    user_id = call.from_user.id  
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT r.route_name, r.description, c.city_name
        FROM routes r
        JOIN cities c ON r.departure_city_id = c.city_id
        JOIN bookings b ON r.route_id = b.route_id
        JOIN users u ON b.user_id = u.user_id
        WHERE u.user_id = %s
    """, (user_id,))
    routes = cursor.fetchall()
    cursor.close()
    conn.close()

    if routes:
        routes_text = "\n".join([f"{route[0]}: {route[1]} (–ì–æ—Ä–æ–¥: {route[2]})" for route in routes])
        bot.send_message(call.message.chat.id, f"–í–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç—ã:\n\n{routes_text}")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.")

@bot.callback_query_handler(func=lambda call: call.data == "find_flights")
def find_flights(call):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü–æ –≥–æ—Ä–æ–¥–∞–º", callback_data="flights_by_cities"),
        InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="flights_by_date"),
    )
    bot.send_message(
        call.message.chat.id,
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–µ–π—Å—ã?",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "flights_by_cities")
def flights_by_cities(call):
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT f.flight_number, c1.city_name, c2.city_name, f.departure_time, f.arrival_time, f.airline
        FROM flights f
        JOIN cities c1 ON f.departure_city_id = c1.city_id
        JOIN cities c2 ON f.arrival_city_id = c2.city_id
    """)
    flights = cursor.fetchall()
    cursor.close()
    conn.close()

    flights_text = "\n\n".join([f"‚úàÔ∏è {flight[0]}: {flight[1]} ‚Üí {flight[2]}\n"
                               f"üïí –í—ã–ª–µ—Ç: {flight[3]}\nüïí –ü—Ä–∏–ª–µ—Ç: {flight[4]}\nüõ© –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {flight[5]}"
                               for flight in flights])
    bot.send_message(call.message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:\n\n{flights_text}")

@bot.callback_query_handler(func=lambda call: call.data == "flights_by_date")
def flights_by_date(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤.")
    bot.register_next_step_handler(msg, show_flights_by_date)

def show_flights_by_date(message):
    flight_date = message.text
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT f.flight_number, c1.city_name, c2.city_name, f.departure_time, f.arrival_time, f.airline
        FROM flights f
        JOIN cities c1 ON f.departure_city_id = c1.city_id
        JOIN cities c2 ON f.arrival_city_id = c2.city_id
        WHERE DATE(f.departure_time) = %s
    """, (flight_date,))
    flights = cursor.fetchall()
    cursor.close()
    conn.close()

    if flights:
        flights_text = "\n\n".join([f"‚úàÔ∏è {flight[0]}: {flight[1]} ‚Üí {flight[2]}\n"
                                   f"üïí –í—ã–ª–µ—Ç: {flight[3]}\nüïí –ü—Ä–∏–ª–µ—Ç: {flight[4]}\nüõ© –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {flight[5]}"
                                   for flight in flights])
        bot.send_message(message.chat.id, f"–†–µ–π—Å—ã –Ω–∞ {flight_date}:\n\n{flights_text}")
    else:
        bot.send_message(message.chat.id, f"–†–µ–π—Å—ã –Ω–∞ {flight_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data == "attractions")
def view_guides(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–∏–¥–æ–≤.")
    bot.register_next_step_handler(msg, show_guides)

def show_guides(message):
    city_name = message.text
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute(""" 
        SELECT g.name, g.experience_years, g.phone_number, g.email
        FROM guides g
        JOIN cities c ON g.city_id = c.city_id
        WHERE c.city_name = %s
    """, (city_name,))
    guides = cursor.fetchall()
    cursor.close()
    conn.close()

    if guides:
        guides_text = "\n".join([f"üë®‚Äçüíº {guide[0]} - {guide[1]} –ª–µ—Ç –æ–ø—ã—Ç–∞\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {guide[2]}\nüìß Email: {guide[3]}"
                                 for guide in guides])
        bot.send_message(message.chat.id, f"–ì–∏–¥—ã –≤ {city_name}:\n\n{guides_text}")
    else:
        bot.send_message(message.chat.id, f"–ì–∏–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_panel" and call.from_user.id == ADMIN_ID)
def admin_panel(call):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="add_city"),
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å", callback_data="add_flight"),
    )
    bot.send_message(call.message.chat.id, "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "add_city" and call.from_user.id == ADMIN_ID)
def add_city(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_city_name)

def process_city_name(message):
    city_name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_country_name, city_name)

def process_country_name(message, city_name):
    country_name = message.text
    conn = db_connect()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT city_id FROM cities WHERE city_name = %s AND country = %s", (city_name, country_name))
        existing_city = cursor.fetchone()

        if existing_city:
            bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ {city_name}, {country_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            cursor.execute("INSERT INTO cities (city_name, country) VALUES (%s, %s)", (city_name, country_name))
            conn.commit()
            bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ {city_name}, {country_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data == "add_flight" and call.from_user.id == ADMIN_ID)
def add_flight(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞:")
    bot.register_next_step_handler(msg, process_flight_number)

def process_flight_number(message):
    flight_number = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_departure_city, flight_number)

def process_departure_city(message, flight_number):
    departure_city = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_arrival_city, flight_number, departure_city)

def process_arrival_city(message, flight_number, departure_city):
    arrival_city = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    bot.register_next_step_handler(msg, process_departure_time, flight_number, departure_city, arrival_city)

def process_departure_time(message, flight_number, departure_city, arrival_city):
    departure_time = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–∏–ª–µ—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    bot.register_next_step_handler(msg, process_arrival_time, flight_number, departure_city, arrival_city, departure_time)

def process_arrival_time(message, flight_number, departure_city, arrival_city, departure_time):
    arrival_time = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏:")
    bot.register_next_step_handler(msg, process_airline, flight_number, departure_city, arrival_city, departure_time, arrival_time)

def process_airline(message, flight_number, departure_city, arrival_city, departure_time, arrival_time):
    airline = message.text
    conn = db_connect()
    cursor = conn.cursor()

    try:
        print(f"Departure city: {departure_city}, Arrival city: {arrival_city}")
        
        cursor.execute("SELECT city_id FROM cities WHERE city_name ILIKE %s", (departure_city,))
        departure_city_id = cursor.fetchone()
        cursor.execute("SELECT city_id FROM cities WHERE city_name ILIKE %s", (arrival_city,))
        arrival_city_id = cursor.fetchone()

        if departure_city_id and arrival_city_id:
            cursor.execute(""" 
                INSERT INTO flights (flight_number, departure_city_id, arrival_city_id, departure_time, arrival_time, airline)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (flight_number, departure_city_id[0], arrival_city_id[0], departure_time, arrival_time, airline))
            conn.commit()
            bot.send_message(message.chat.id, f"–†–µ–π—Å {flight_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()


@bot.callback_query_handler(func=lambda call: call.data == "finish_trip")
def finish_trip(call):
    bot.send_message(
        call.message.chat.id,
        "–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –£–¥–∞—á–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!"
    )

bot.polling(none_stop=True)
